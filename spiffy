default partial alphanumeric_keys modifier_keys

xkb_symbols "basic" {
  name[Group1]= "Sporak";

  include "us(dvorak)"
  include "keypad(ops)"
  include "ctrl(nocaps)"
  include "ctrl(menu_rctrl)"
  include "terminate(ctrl_alt_bksp)"
  include "level3(modifier_mapping)"
  include "level5(modifier_mapping)"
  include "sporak(mirror_left)"
  include "sporak(mirror_right)"

  //TODO Shift+Esc isn't voided
  key <ESC> { type = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK",
              [ NoSymbol, VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol ],
              actions = [NoAction(), SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks),
                         SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks), SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks),
                         SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks), SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks),
                         SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks), SetMods(modifiers=Lock+Shift+LevelThree+LevelFive, clearLocks)] };
  key <LFSH> { type = "TWO_LEVEL",
               actions = [LatchMods(modifiers=Shift), LockMods(modifiers=Shift)] };
  key <RTSH> { type = "TWO_LEVEL",
               actions = [LatchMods(modifiers=Shift), LockMods(modifiers=Shift)] };
  key <LWIN> { [ ISO_Level5_Latch, ISO_Level5_Latch, ISO_Level5_Latch, ISO_Level5_Latch,
                 ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ] };
  key <RWIN> { [ ISO_Level5_Latch, ISO_Level5_Latch, ISO_Level5_Latch, ISO_Level5_Latch,
                 ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ] };
  key <RALT> { [ ISO_Level3_Latch, ISO_Level3_Latch, ISO_Level3_Lock, ISO_Level3_Lock,
                 ISO_Level3_Latch, ISO_Level3_Latch, ISO_Level3_Lock, ISO_Level3_Lock ] };
  key <NMLK> { type = "EIGHT_LEVEL",
               [ Caps_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock,
                 ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ] };

  key <RTRN> { type = "EIGHT_LEVEL",
               [ NoSymbol, Return, Return, Return, Return, equal, Control_L, Control_L],
               actions = [ NoAction(), SetMods(modifiers=Shift+Lock, clearLocks), NoAction(), NoAction(), NoAction(), NoAction(), SetMods(modifiers=Control), SetMods(modifiers=Control) ] };


  key.type[Group1] = "EIGHT_LEVEL";
  key <TLDE> { [ 0, asciicircum, degree, zerosubscript, Insert, Insert, bracketleft, less ] };
  key <AE01> { [ 1, dollar, onesuperior, onesubscript, F1, F1, bracketright, greater ] };
  key <AE02> { [ 2, numbersign, twosuperior, twosubscript, F2, F2, minus, plus ] };
  key <AE03> { [ 3, at, threesuperior, threesubscript, F3, F3, question, exclam ] };
  key <AE04> { [ 4, grave, foursuperior, foursubscript, F4, F4, 9, bar ] };
  key <AE05> { [ 5, asciitilde, fivesuperior, fivesubscript, F5, F5, 8, ampersand ] };
  key <AE06> { [ 6, percent, sixsuperior, sixsubscript, F6, F6, 7, asterisk ] };
  key <AE07> { [ 7, asterisk, sevensuperior, sevensubscript, F7, F7, 6, percent ] };
  key <AE08> { [ 8, ampersand, eightsuperior, eightsubscript, F8, F8, 5, asciitilde ] };
  key <AE09> { [ 9, bar, ninesuperior, ninesubscript, F9, F9, 4, grave ] };
  key <AE10> { [ question, exclam, questiondown, exclamdown, F10, F10, 3, at ] };
  key <AE11> { [ minus, plus, endash, emdash, F11, F11, 2, numbersign ] };
  key <AE12> { [ bracketleft, less, lessthanequal, guillemotleft, F12, F12, 1, dollar ] };
  key <BKSP> { [ bracketright, greater, greaterthanequal, guillemotright, ISO_Next_Group, ISO_Prev_Group, 0, asciicircum ] };

  key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
  key <TAB> { [ Tab, Tab, Tab, Tab, Insert, Insert, BackSpace, equal ] };
  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AD01> { [ x, X, leftpointer, NoSymbol, Home, Home, j, J ] };
  key <AD02> { [ o, O, uparrow, NoSymbol, Up, Up, l, L ] };
  key <AD03> { [ i, I, rightpointer, VoidSymbol, End, End, h, H ] };
  key <AD04> { [ f, F, enfilledsqbullet, enopensquarebullet, Prior, Prior, k, K ] };
  key.type[Group1] = "EIGHT_LEVEL";
  key <AD05> { [ period, colon, dead_grave, dead_doublegrave, semicolon, underscore, comma, semicolon ] };
  key <AD06> { [ slash, backslash, Multi_key, dead_greek, braceleft, braceright, slash, backslash ] };
  key <AD07> { [ comma, semicolon, division, U2044, slash, backslash, period, colon ] };
  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AD08> { [ k, K, upleftcorner, NoSymbol, 7, asciicircum, f, F ] };
  key <AD09> { [ h, H, topt, NoSymbol, 8, bar, i, I ] };
  key <AD10> { [ l, L, uprightcorner, NoSymbol, 9, ampersand, o, O ] };
  key <AD11> { [ j, J, vertbar, NoSymbol, minus, asciitilde, x, X ] };
  key.type[Group1] = "EIGHT_LEVEL";
  key <AD12> { [ underscore, equal, notequal, approxeq, less, greater, Tab, Tab ] };
  key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
  key <BKSL> { [ BackSpace, BackSpace, BackSpace, BackSpace, BackSpace, BackSpace, Escape, Escape ] };

  key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
  key <CAPS> { [ NoSymbol, NoSymbol, NoSymbol, NoSymbol, NoSymbol, NoSymbol, Return, underscore ] };
  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AC01> { [ u, U, leftarrow, NoSymbol, Left, Left, y, Y ] };
  key <AC02> { [ a, A, downarrow, NoSymbol, Down, Down, r, R ] };
  key <AC03> { [ e, E, rightarrow, NoSymbol, Right, Right, n, N ] };
  key <AC04> { [ s, S, enfilledcircbullet, enopencircbullet, Next, Next, t, T ] };
  key <AC05> { [ w, W, dead_acute, dead_doubleacute, quotedbl, apostrophe, g, G ] };
  key.type[Group1] = "EIGHT_LEVEL";
  key <AC06> { [ apostrophe, quotedbl, leftdoublequotemark, rightdoublequotemark, parenleft, parenright, apostrophe, quotedbl ] };
  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AC07> { [ g, G, multiply, periodcentered, asterisk, x, w, W ] };
  key <AC08> { [ t, T, leftt, NoSymbol, 4, D, s, S ] };
  key <AC09> { [ n, N, crossinglines, NoSymbol, 5, E, e, E ] };
  key <AC10> { [ r, R, rightt, NoSymbol, 6, F, a, A ] };
  key <AC11> { [ y, Y, horizlinescan5, plusminus, plus, colon, u, U ] };

  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AB01> { [ z, Z, dead_diaeresis, dead_breve, dollar, asciicircum, v, V ] };
  key <AB02> { [ q, Q, dead_circumflex, dead_caron, at, numbersign, p, P ] };
  key <AB03> { [ c, C, dead_abovedot, dead_abovering, asciitilde, grave, d, D ] };
  key <AB04> { [ b, B, dead_macron, dead_tilde, asterisk, percent, m, M ] };
  key.type[Group1] = "EIGHT_LEVEL";
  key <AB05> { [ parenleft, braceleft, dead_cedilla, dead_ogonek, exclam, question, parenleft, braceleft ] };
  key <AB06> { [ parenright, braceright, dead_belowdot, dead_belowcomma, bracketleft, bracketright, parenright, braceright ] };
  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <AB07> { [ m, M, ellipsis, checkmark, period, comma, b, B ] };
  key <AB08> { [ d, D, lowleftcorner, NoSymbol, 1, A, c, C ] };
  key <AB09> { [ p, P, bott, NoSymbol, 2, B, q, Q ] };
  key <AB10> { [ v, V, lowrightcorner, NoSymbol, 3, C, z, Z ] };

 key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <SPCE> { [ space, space, emptyset, nobreakspace, 0, 0, space, space ], 
               actions = [NoAction(), SetMods(modifiers=Shift+Lock, clearLocks)] };

  key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
  key <KPDV> { [ NoSymbol, backslash, division, U2044, slash, backslash ] };
  key <KPMU> { [ NoSymbol, x, multiply, NoSymbol, asterisk, x ] };
  key <KPSU> { [ NoSymbol, asciitilde, vertbar, NoSymbol, minus, asciitilde ] };
  key <KPAD> { [ NoSymbol, colon, horizlinescan5, plusminus, plus, colon ] };
  key <KPEN> { [ NoSymbol, equal, notequal, approxeq, KP_Enter, KP_Enter ] };

  key <KPDL> { [ KP_Decimal, KP_Separator, NoSymbol, NoSymbol, Next ] };
  key <KP0> { [ KP_0, 0, emptyset, NoSymbol, space, nobreakspace ] };
  key <KP1> { [ KP_1, A, lowleftcorner, NoSymbol, BackSpace, Delete ] };
  key <KP2> { [ KP_2, B, bott, NoSymbol, Tab, Tab ] };
  key <KP3> { [ KP_3, C, lowrightcorner, NoSymbol, Prior, Prior ] };
  key <KP4> { [ KP_4, D, leftt, NoSymbol, Left, Left ] };
  key <KP5> { [ KP_5, E, crossinglines, NoSymbol, Down, Down ] };
  key <KP6> { [ KP_6, F, rightt, NoSymbol, Right, Right ] };
  key <KP7> { [ KP_7, asciicircum, upleftcorner, NoSymbol, Home, Home ] };
  key <KP8> { [ KP_8, bar, topt, NoSymbol, Up, Up ] };
  key <KP9> { [ KP_9, ampersand, uprightcorner, NoSymbol, End, End ] };
};

hidden partial modifier_keys
xkb_symbols "mirror_left" {
  key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
  key <LCTL> { actions = [ LatchMods(modifiers=LevelThree+LevelFive), LatchMods(modifiers=LevelThree+LevelFive),
                           NoAction(), NoAction(), NoAction(), NoAction(),
                           LockMods(modifiers=LevelThree+LevelFive), LockMods(modifiers=LevelThree+LevelFive) ] };
};

hidden partial modifier_keys
xkb_symbols "mirror_right" {
  key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
  key <RCTL> { actions = [ LatchMods(modifiers=LevelThree+LevelFive), LatchMods(modifiers=LevelThree+LevelFive),
                           NoAction(), NoAction(), NoAction(), NoAction(),
                           LockMods(modifiers=LevelThree+LevelFive), LockMods(modifiers=LevelThree+LevelFive) ] };
};

default partial xkb_types "reverse" {
    override type "REVERSE_TWO_LEVEL" {
    modifiers = Lock;
    map[Lock] = Level2;
    level_name[Level1] = "Base";
    level_name[Level2] = "Shift";
    };
};
